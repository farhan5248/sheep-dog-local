/*
 * generated by Xtext 2.36.0
 */
package org.farhan.dsl.sheepdog.generator;

import java.io.PrintWriter;
import java.io.StringWriter;
import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.farhan.dsl.lang.*;
import org.farhan.dsl.sheepdog.sheepDog.TestStepContainer;
import org.farhan.dsl.sheepdog.sheepDog.TestSuite;
import org.farhan.dsl.sheepdog.impl.SourceFileRepository;
import org.farhan.dsl.sheepdog.impl.StepObjectImpl;
import org.farhan.dsl.sheepdog.impl.TestProjectImpl;
import org.farhan.dsl.sheepdog.impl.TestStepImpl;
import org.farhan.dsl.sheepdog.sheepDog.TestStep;

/**
 * Generates code from your model files on save.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
public class SheepDogGenerator extends AbstractGenerator {

	private static final Logger logger = Logger.getLogger(SheepDogGenerator.class);

	@Override
	public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {

		if (resource.getContents().get(0) instanceof TestSuite) {
			TestSuite theTestSuite = (TestSuite) resource.getContents().get(0);
			for (TestStepContainer scenario : theTestSuite.getTestStepContainerList()) {
				for (TestStep step : scenario.getTestStepList()) {
					doGenerate(step);
				}
			}
		}
	}

	public void doGenerate(TestStep step) {
		try {
			
			TestProjectImpl testProject = new TestProjectImpl(new SourceFileRepository(step.eResource().getURI().toPlatformString(true)));
			// TODO rename to add step definition and return StepObjectImpl
			StepObjectImpl stepObjectImpl = (StepObjectImpl) StepObjectBuilder
					.generateStepDefinition(new TestStepImpl(step), testProject).getParent();
			testProject.putStepObject(stepObjectImpl);
		} catch (Exception e) {
			logError(e, step);
		}
	}

	private static void logError(Exception e, TestStep step) {
		logger.error("There was a problem generating for step: " + step.getName());
		StringWriter sw = new StringWriter();
		e.printStackTrace(new PrintWriter(sw));
		logger.error(sw.toString());
	}
}
